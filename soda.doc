Please use Tab Size = 8 to read this file.
################################################################################
Event 1: Unused giftcards causing memory leak
Detail: We implemented Student to delete a giftcard after a giftcard is used. However,
        in some rare cases, student(s) may only need to make one purchase and the student 
	uses WATCard to purchase. In those cases, some giftcards will not be deleted 
	because nobody uses them. Thus, memory leak happens. The above situation does
	not happen often and when it happens, the size of memory leak is usually 32 bytes 
	but can be 32*n bytes. This problem can be fixed by letting Student deleting unused 
        giftcards when they finishes. 
Input: ./soda d 30
Output:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S0,1    S0,2    S2                      S
                C0,5    R0      S                                       S2
D0,3            W       R1              G9                                      S2      t0,5
                C1,5    R2                      V0
D0,1                    N0,0                            V1
                        N1,1    P9
                                d0,9    P                       r
                                U0,11
D0,2    D2      W               D0,0    G7                      R                       T0,5
                                P7                                                      t1,5
                                d1,7    P                       B0,0    r
                                U1,13
D1,3                            D1,0    G5      B0,3                    R
D1,3    D2                                              G0,0            B0,0
        F                       P5                      V2                              T1,5
D1,1                    N1,2    d2,5    P       F                               r
...
Explaination: Stud0 prints S0,1 and that means that they only need to make one purchase. Later, Stud0 prints 
              B0,3 then prints F. These two outputs indicate that Stud0 uses a WATCard to make one purchase 
              then finished. If the program does not delete Stud0's giftcard properly, a memory leak of 32 
              bytes will be printed at the bottom. However, our program ends without such outputs that means 
              our program is implemented correctly. 

################################################################################
Event 2: A WATCars is lost multiple times in a roll
Detail: When a student wants to make a purchase with a WATCard that has insufficient balance, 
        the student will need to charge it. A courier may lose the WATCard in that process. 
	Student will gets an exception and wants to get a new WATCard. The courier may lose the
	new WATCard as well.
Input: ./soda d 33
Output:
arent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S3,2    S0,7    S2                      S
                C0,5    R0      S                                       S2
D1,3            W       R1              G5                                      S2      t0,5
                C1,5    R2                      V0
D0,2                    N0,0                            V1
D0,3                    N1,1    P5
        D2      W               d0,5                                                    L0
                                U0,15   P                       r                       t1,5
D1,1                            D0,0    G8                      R
                                P8
                                d1,8    P       G3,0            B3,1    r
                                U1,12
D1,1            C0,5            D1,0    G7      L                       R
                                P7
        D2                      d2,7
        F       W                                                                       T1,5
                                U2,13   P                                       r       t0,5
                                D2,0    G3              G0,0            B0,2    R
                                P3
D1,2                            d0,3    P                       r
                                U0,13
D1,1                            D0,0    G8                      R
                                P8
D1,1                            d1,8    P               B0,3            B0,1
                                U1,6    G5                              r
                                D1,0                                    R
D1,2                            P5                      B0,1            B0,3
D0,2            T1,7            d2,5    P                                       r
                                U2,9
                                D2,1
                                d0,1    G1                      r               R
                                U0,12
D0,3            W               D0,0                            R                       L0
                C0,5            P1              L                                       t1,7
D1,1            W               d1,1    P                               r               T1,7
                                U1,7                                                    t0,5
                                D1,1
                                d2,1    G6                              R       r
                                U2,8
D0,1                            D2,0                    B0,6            B0,2    R
                                P6
                                d0,6    P                       r
                                U0,7
                                D0,1
D1,3                            d1,1    G6                      R       r
                                U1,7
                                D1,0                                    R
D0,2                            P6                      B0,4            B0,1
                                d2,6    P                               B0,0    r
                                U2,3
                                D2,1
D0,2                            d0,1    G2              B0,2    r               R
                                U0,6
                                D0,0                            R                       T0,5
                                P2              B3,3            B3,4
D1,3                            d1,2    P                               r
                                U1,8
                                D1,1
                                d2,1    G3                              R       r
                                U2,3
                                D2,1
D0,1                            d0,1                    V2      r               R
                                U0,6
D0,1                    N1,2    D0,0            F               R
...
Explaination: Cour0 prints t0,5. This means that student 0 wants to transfer 5 dollars. Cour0 then prints
              L0, meaning that WATCard is lost. Later, Cour0 prints t0,5 again. Implies the card is lost 
              again. Stud0 receives these messages and prints two L next to each other. After that, Stud0 
              prints B3,3 and F. That means we properly implemented our program and Stud0 ends properly. 

################################################################################
Event 3:  transfer() followed by Free (advertisement)
Detail :  After a student calls transfer(), its wat-card balance will be increased
          by $5 + sodaCost. If the student continues its loop and attempts to purchase
          the next drink, and the vm offers a free drink (i.e. raises Free exception),
          then the student should print his/her balance = remaining + $5 + sodaCost.
          This event is worth notice because it increases wat-card balance by a lot,
          when its balance is printed by the student.
Input:    Use default soda.config as given in the assignment
					./soda d 22370
Output:   The output of Stud0 illustrates this event.

Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
...
D0,2                            d1,2                    B0,0    R       r       B0,4
                                U1,6
D1,1                            D1,1            B2,0                    R       B2,4
                                P6
                                d2,6    P               F                       r
                                D2,4
D0,2                            d0,4    G4                      r               R
                                D0,4
                                d1,4                            R       r
                                U1,3
D1,3            T0,7            D1,1                                    R
                W                                                                       t0,7
D1,2                            P4              A2,7                            A       T0,7
D1,3                            d2,4    P       B2,5                            B2,3
                                U2,1    G3      F                               r
                                D2,3
...

Explaination: This output shows that Stud0 runs out of money after his/her B2,0 purchase.
              After he/she calls transfer() from WATCardOffice, its balance turns to be
	      $5 + sodaCost = $7. Then, he/she gets a free drink, and A2,7 reflects this
	      change in wat-card balance.

################################################################################

################################################################################


################################################################################

Event 6:
Detail: 
Input:
Output:
Explaination:
################################################################################




Lichen:
1. memory leak once in a while (unused gift card)
2. It's possible to L twice/multiple times in a row
	- Check Courier output
	- Check student output
3. Advertisement right after transfer => show balance = remaining + 5 + sodaCost
4. Consecutive free (advertisement) should show the same balance
	- Check vm output
5. If a student chooses a wat-card for his/her first purchase since the gift card is not delivered yet, and the vm runs out of stock, then when he/she visits another vm, he/she will select card again and may select the prioritized gift card.
6. In a delivery run, if the truck has visited all the vms once and still has stocks, it will stop visiting vms, but visiting the plant instead to pick up new stocks. All the undelivered cargo from last run will be deleted.
7. Nameserver assigns students in round robin order initially, and moves each student to the next vm accordingly when getMachine() is called
8. How truck deals with flat tire





Event 1:Group members tried to match program outputs with sample outputs
Detail: After the program complied, my team started to debug. We used to believe that our output
        needs to call mprng in the same order as the sample's. We spent about 5 days on to fix 
        our program's mprng order but did not make much progress. We were very desprate and thought 
        that we would not be able to finish this assignment. We talked with an IA for help and found 
        that we do not need to match any of the outputs as long as our outputs make sense :D
Input:
  ./soda d 10
Output:
Explaination: our outputs start to differ from the sample since the third line. 
################################################################################

Event 2: GroupOff choose random student without repeat
Detail: groupOff should initialize each student's WATCard in random order. We used mprng to randomly
        pick a student id and initialize the corresponding WATCard. An id may be picked several times
        but the corresponding WATCard is initialized only once. We later discovered that this is wrong. 
        We should remove an id once it is used so that no id is chosen twice. We fixed this problem by 
        swapping the chosen id with the current last id in the list and decrease the list size by 1. 
Input: ./soda d 10
Output:
Explaination: After fixing this problem, the order giftcards being generated should be different but this
              does not show in the output because GroupOff does not printer the id of students receive a giftcard.
################################################################################

Event 3: Decide where to yield in BottlingPlant
Detail: We were not sure whether the BottlingPlant needs to yield beofre the first production and attended 
        an office hour to clarify that. The answer is that BottlingPlant needs to yield before each production.
Input: ./soda d 10
Outp
Explaination: Outputs Gb and P genereated by Plant are always sepreate in a few lines. That means BottlingPlant 
              does not finish generating bottles righ after it prints Gb. This is realized by letting BottlingPlant 
              to yeild before production every loop and this matchs the requirement.
################################################################################

Event 4: Truck prints wired numbers after a few deliveries
Detail: We found that Truck always prints very large number after a few deliveries in Uv,b. After examine our codes, 
        we found two issues related with this problem. The first one is that we did not initialize a variable. The 
        second one is that we forgot to reset stocks and that causes another unsigned int variable became negative. 
        Since it is an unsigned int, it underflows.
Input: ./soda d 10
Output:
Explaination: After correcting the mistakes, Truck always prints correct positive numbers. 
################################################################################

Event 5: All students received the same gift card
Detail: We accidentally created two counter variables with the same name, one in .h file and the other in 
        Groupoff::main(). We increased the local scope counter but deliver giftcards using the counter that 
        is created in .h. As a result, everyone receives the first giftcard in the list. Wefixed this problem 
        by deleting the counter variable in GroupOff::main(). 
Input: ./soda d 10
Output:
Explaination: Before fixing this problem, our program always end with exceptions. The reason is that students 
              delete their giftcard after using them. Since everyone gets the same giftcard, everyone was deleting
              the same giftcard and only the first student does so can success.
################################################################################

Event 6:
Detail: 
Input:
Output:
Explaination:
################################################################################
